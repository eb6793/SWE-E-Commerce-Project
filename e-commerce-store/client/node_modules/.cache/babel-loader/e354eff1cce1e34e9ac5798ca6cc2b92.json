{"ast":null,"code":"'use strict';\n\nconst https = require('https');\n\nconst _Error = require('./Errors');\n\nconst _Version = require('../package.json').version;\n\nclass HttpsClient {\n  constructor(_nb) {\n    this._nb = _nb;\n  }\n  /**\n   * Performs actual requests\n   * @param params\n   * @param data\n   * @returns {Promise}\n   * @private\n   */\n\n\n  request(params, data) {\n    data = data || {};\n    return new Promise((resolve, reject) => {\n      const config = this._nb.getConfig(); // Set key\n\n\n      data.key = config.apiKey; // Encode params\n\n      const query = JSON.stringify(data); // Get request options\n\n      const opts = this._nb.getRequestOpts(params);\n\n      if (opts.path) {\n        opts.path = `/${config.apiVersion}/${opts.path}`;\n      }\n\n      opts.headers['User-Agent'] = 'NeverBounceApi-NodeJS/' + _Version;\n      opts.headers['Content-Length'] = Buffer.byteLength(query); // Make request\n\n      const req = https.request(opts, res => {\n        // Handle 4xx HTTP codes\n        if (res.statusCode >= 400 && res.statusCode < 500) {\n          return reject(new _Error(_Error.GeneralError, 'We were unable to complete your request. ' + 'The following information was supplied: ' + `\\n\\n(Request error [status ${res.statusCode}])`));\n        } // Handle 5xx HTTP codes\n\n\n        if (res.statusCode >= 500) {\n          return reject(new _Error(_Error.GeneralError, 'We were unable to complete your request. ' + 'The following information was supplied: ' + `\\n\\n(Internal error [status ${res.statusCode}])`));\n        }\n\n        res.setEncoding('utf8');\n        let rawData = '';\n        res.on('data', chunk => {\n          rawData += chunk;\n        });\n        res.on('end', () => {\n          return this.parseResponse(opts, rawData, res.headers, res.statusCode).then(resp => resolve(resp), err => reject(err));\n        });\n      });\n      req.on('error', e => reject(e)); // Do request\n\n      req.write(query);\n      req.end(); // Handle timeout\n\n      if (config.timeout) {\n        req.setTimeout(config.timeout, () => {\n          req.destroy();\n        });\n      }\n    });\n  }\n\n  parseResponse(opts, chunks, headers, code) {\n    return new Promise((resolve, reject) => {\n      if (headers['content-type'] !== opts.acceptedType) {\n        return reject(new _Error(_Error.GeneralError, 'The response from NeverBounce was returned with the ' + `type \"${headers['content-type']}\" but a response ` + `type of \"${opts.acceptedType}\" was expected. Try the` + ' request again, if this error persists' + ' let us know at support@neverbounce.com.' + '\\n\\n(Internal error)'));\n      }\n\n      if (headers['content-type'] === 'application/json') {\n        let decoded;\n\n        try {\n          decoded = JSON.parse(chunks);\n        } catch (err) {\n          return reject(new _Error(_Error.GeneralError, 'The response from NeverBounce was unable ' + 'to be parsed as json. Try the request ' + 'again, if this error persists' + ' let us know at support@neverbounce.com.' + '\\n\\n(Internal error)'));\n        } // Check if response was able to be decoded\n        // (some versions of node don't throw an error when JSON.parse fails)\n\n\n        if (!decoded) {\n          return reject(new _Error(_Error.GeneralError, 'The response from NeverBounce was unable ' + 'to be parsed as json. Try the request ' + 'again, if this error persists' + ' let us know at support@neverbounce.com.' + '\\n\\n(Internal error)'));\n        } // Check for missing status and error messages\n\n\n        if (decoded.status === undefined || decoded.status !== 'success' && decoded.message === undefined) {\n          return reject(new _Error(_Error.GeneralError, 'The response from server is incomplete. ' + 'Either a status code was not included or ' + 'the an error was returned without an error ' + 'message. Try the request again, if ' + 'this error persists let us know at' + ' support@neverbounce.com.' + `\\n\\n(Internal error [status ${code}: ${decoded}])`));\n        } // Handle other success statuses\n\n\n        if (decoded.status !== 'success') {\n          let errorType = _Error._lut[decoded.status] || _Error.GeneralError;\n\n          if (errorType === _Error.AuthError) {\n            return reject(new _Error(_Error.AuthError, 'We were unable to authenticate your request. ' + 'The following information was supplied: ' + `${decoded.message}` + '\\n\\n(auth_failure)'));\n          } else {\n            return reject(new _Error(errorType, 'We were unable to complete your request. ' + 'The following information was supplied: ' + `${decoded.message}` + `\\n\\n(${decoded.status})`));\n          }\n        }\n\n        return resolve(decoded);\n      }\n\n      return resolve(chunks);\n    });\n  }\n\n}\n\nmodule.exports = HttpsClient;","map":{"version":3,"sources":["/Users/fazalmahmood/SWE-E-Commerce-Project/e-commerce-store/client/node_modules/neverbounce/src/HttpsClient.js"],"names":["https","require","_Error","_Version","version","HttpsClient","constructor","_nb","request","params","data","Promise","resolve","reject","config","getConfig","key","apiKey","query","JSON","stringify","opts","getRequestOpts","path","apiVersion","headers","Buffer","byteLength","req","res","statusCode","GeneralError","setEncoding","rawData","on","chunk","parseResponse","then","resp","err","e","write","end","timeout","setTimeout","destroy","chunks","code","acceptedType","decoded","parse","status","undefined","message","errorType","_lut","AuthError","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst https = require('https');\nconst _Error = require('./Errors');\nconst _Version = require('../package.json').version;\n\nclass HttpsClient {\n\n    constructor(_nb) {\n        this._nb = _nb;\n    }\n\n    /**\n     * Performs actual requests\n     * @param params\n     * @param data\n     * @returns {Promise}\n     * @private\n     */\n    request(params, data) {\n        data = data || {};\n        return new Promise((resolve, reject) => {\n            const config = this._nb.getConfig()\n            // Set key\n            data.key = config.apiKey;\n\n            // Encode params\n            const query = JSON.stringify(data);\n\n            // Get request options\n            const opts = this._nb.getRequestOpts(params);\n            if(opts.path) {\n                opts.path = `/${config.apiVersion}/${opts.path}`;\n            }\n            opts.headers['User-Agent'] = 'NeverBounceApi-NodeJS/' + _Version;\n            opts.headers['Content-Length'] = Buffer.byteLength(query);\n\n            // Make request\n            const req = https.request(opts, (res) => {\n\n                // Handle 4xx HTTP codes\n                if (res.statusCode >= 400 && res.statusCode < 500) {\n                    return reject(\n                        new _Error(\n                            _Error.GeneralError,\n                            'We were unable to complete your request. '\n                            + 'The following information was supplied: '\n                            + `\\n\\n(Request error [status ${res.statusCode}])`\n                        )\n                    );\n                }\n\n                // Handle 5xx HTTP codes\n                if (res.statusCode >= 500) {\n                    return reject(\n                        new _Error(\n                            _Error.GeneralError,\n                            'We were unable to complete your request. '\n                            + 'The following information was supplied: '\n                            + `\\n\\n(Internal error [status ${res.statusCode}])`\n                        )\n                    );\n                }\n\n                res.setEncoding('utf8');\n\n                let rawData = '';\n                res.on('data', (chunk) => {\n                    rawData += chunk;\n                });\n\n                res.on('end', () => {\n                    return this.parseResponse(opts, rawData, res.headers, res.statusCode)\n                        .then(resp => resolve(resp), err => reject(err));\n                })\n            });\n\n            req.on('error', (e) => reject(e));\n\n            // Do request\n            req.write(query);\n            req.end();\n\n            // Handle timeout\n            if (config.timeout) {\n                req.setTimeout(config.timeout, () => {\n                    req.destroy();\n                });\n            }\n        })\n    }\n\n    parseResponse(opts, chunks, headers, code) {\n        return new Promise((resolve, reject) => {\n\n            if (headers['content-type'] !== opts.acceptedType) {\n                return reject(\n                    new _Error(\n                        _Error.GeneralError,\n                        'The response from NeverBounce was returned with the '\n                        + `type \"${headers['content-type']}\" but a response `\n                        + `type of \"${opts.acceptedType}\" was expected. Try the`\n                        + ' request again, if this error persists'\n                        + ' let us know at support@neverbounce.com.'\n                        + '\\n\\n(Internal error)'\n                    )\n                );\n            }\n\n            if (headers['content-type'] === 'application/json') {\n                let decoded;\n\n                try {\n                    decoded = JSON.parse(chunks);\n                } catch (err) {\n                    return reject(\n                        new _Error(\n                            _Error.GeneralError,\n                            'The response from NeverBounce was unable '\n                            + 'to be parsed as json. Try the request '\n                            + 'again, if this error persists'\n                            + ' let us know at support@neverbounce.com.'\n                            + '\\n\\n(Internal error)'\n                        )\n                    );\n                }\n\n                // Check if response was able to be decoded\n                // (some versions of node don't throw an error when JSON.parse fails)\n                if (!decoded) {\n                    return reject(\n                        new _Error(\n                            _Error.GeneralError,\n                            'The response from NeverBounce was unable '\n                            + 'to be parsed as json. Try the request '\n                            + 'again, if this error persists'\n                            + ' let us know at support@neverbounce.com.'\n                            + '\\n\\n(Internal error)'\n                        )\n                    );\n                }\n\n                // Check for missing status and error messages\n                if (decoded.status === undefined || (decoded.status !== 'success' && decoded.message === undefined)) {\n                    return reject(\n                        new _Error(\n                            _Error.GeneralError,\n                            'The response from server is incomplete. '\n                            + 'Either a status code was not included or '\n                            + 'the an error was returned without an error '\n                            + 'message. Try the request again, if '\n                            + 'this error persists let us know at'\n                            + ' support@neverbounce.com.'\n                            + `\\n\\n(Internal error [status ${code}: ${decoded}])`\n                        )\n                    );\n                }\n\n                // Handle other success statuses\n                if (decoded.status !== 'success') {\n                    let errorType = _Error._lut[decoded.status] || _Error.GeneralError;\n                    if(errorType === _Error.AuthError) {\n                        return reject(\n                            new _Error(\n                                _Error.AuthError,\n                                'We were unable to authenticate your request. '\n                                + 'The following information was supplied: '\n                                + `${decoded.message}`\n                                + '\\n\\n(auth_failure)'\n                            )\n                        );\n                    } else {\n                        return reject(\n                            new _Error(\n                                errorType,\n                                'We were unable to complete your request. '\n                                + 'The following information was supplied: '\n                                + `${decoded.message}`\n                                + `\\n\\n(${decoded.status})`\n                            )\n                        );\n                    }\n                }\n\n                return resolve(decoded);\n            }\n\n            return resolve(chunks);\n        });\n    }\n}\n\nmodule.exports = HttpsClient;\n"]},"metadata":{},"sourceType":"script"}