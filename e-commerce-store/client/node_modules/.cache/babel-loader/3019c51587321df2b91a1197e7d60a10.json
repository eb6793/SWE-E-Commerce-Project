{"ast":null,"code":"const Errors = require(\"../Errors\");\n\nconst Request = require(\"../Request\");\n\nconst Suggestion = require(\"./Suggestion\");\n\nconst Promise = require(\"promise\");\n/**\n * This client sends lookups to the SmartyStreets US Autocomplete Pro API, <br>\n *     and attaches the suggestions to the appropriate Lookup objects.\n */\n\n\nclass Client {\n  constructor(sender) {\n    this.sender = sender;\n  }\n\n  send(lookup) {\n    if (typeof lookup === \"undefined\") throw new Errors.UndefinedLookupError();\n    let request = new Request();\n    request.parameters = buildRequestParameters(lookup);\n    return new Promise((resolve, reject) => {\n      this.sender.send(request).then(response => {\n        if (response.error) reject(response.error);\n        lookup.result = buildSuggestionsFromResponse(response.payload);\n        resolve(lookup);\n      }).catch(reject);\n    });\n\n    function buildRequestParameters(lookup) {\n      return {\n        search: lookup.search,\n        selected: lookup.selected,\n        max_results: lookup.maxResults,\n        include_only_cities: joinFieldWith(lookup.includeOnlyCities, \";\"),\n        include_only_states: joinFieldWith(lookup.includeOnlyStates, \";\"),\n        include_only_zip_codes: joinFieldWith(lookup.includeOnlyZIPCodes, \";\"),\n        exclude_states: joinFieldWith(lookup.excludeStates, \";\"),\n        prefer_cities: joinFieldWith(lookup.preferCities, \";\"),\n        prefer_states: joinFieldWith(lookup.preferStates, \";\"),\n        prefer_zip_codes: joinFieldWith(lookup.preferZIPCodes, \";\"),\n        prefer_ratio: lookup.preferRatio,\n        prefer_geolocation: lookup.preferGeolocation\n      };\n\n      function joinFieldWith(field, delimiter) {\n        if (field.length) return field.join(delimiter);\n      }\n    }\n\n    function buildSuggestionsFromResponse(payload) {\n      if (payload.suggestions === null) return [];\n      return payload.suggestions.map(suggestion => new Suggestion(suggestion));\n    }\n  }\n\n}\n\nmodule.exports = Client;","map":{"version":3,"sources":["/Users/fazalmahmood/SWE-E-Commerce-Project/e-commerce-store/client/node_modules/smartystreets-javascript-sdk/src/us_autocomplete_pro/Client.js"],"names":["Errors","require","Request","Suggestion","Promise","Client","constructor","sender","send","lookup","UndefinedLookupError","request","parameters","buildRequestParameters","resolve","reject","then","response","error","result","buildSuggestionsFromResponse","payload","catch","search","selected","max_results","maxResults","include_only_cities","joinFieldWith","includeOnlyCities","include_only_states","includeOnlyStates","include_only_zip_codes","includeOnlyZIPCodes","exclude_states","excludeStates","prefer_cities","preferCities","prefer_states","preferStates","prefer_zip_codes","preferZIPCodes","prefer_ratio","preferRatio","prefer_geolocation","preferGeolocation","field","delimiter","length","join","suggestions","map","suggestion","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,SAAD,CAAvB;AAEA;;;;;;AAIA,MAAMI,MAAN,CAAa;AACZC,EAAAA,WAAW,CAACC,MAAD,EAAS;AACnB,SAAKA,MAAL,GAAcA,MAAd;AACA;;AAEDC,EAAAA,IAAI,CAACC,MAAD,EAAS;AACZ,QAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC,MAAM,IAAIT,MAAM,CAACU,oBAAX,EAAN;AAEnC,QAAIC,OAAO,GAAG,IAAIT,OAAJ,EAAd;AACAS,IAAAA,OAAO,CAACC,UAAR,GAAqBC,sBAAsB,CAACJ,MAAD,CAA3C;AAEA,WAAO,IAAIL,OAAJ,CAAY,CAACU,OAAD,EAAUC,MAAV,KAAqB;AACvC,WAAKR,MAAL,CAAYC,IAAZ,CAAiBG,OAAjB,EACEK,IADF,CACOC,QAAQ,IAAI;AACjB,YAAIA,QAAQ,CAACC,KAAb,EAAoBH,MAAM,CAACE,QAAQ,CAACC,KAAV,CAAN;AAEpBT,QAAAA,MAAM,CAACU,MAAP,GAAgBC,4BAA4B,CAACH,QAAQ,CAACI,OAAV,CAA5C;AACAP,QAAAA,OAAO,CAACL,MAAD,CAAP;AACA,OANF,EAOEa,KAPF,CAOQP,MAPR;AAQA,KATM,CAAP;;AAWA,aAASF,sBAAT,CAAgCJ,MAAhC,EAAwC;AACvC,aAAO;AACNc,QAAAA,MAAM,EAAEd,MAAM,CAACc,MADT;AAENC,QAAAA,QAAQ,EAAEf,MAAM,CAACe,QAFX;AAGNC,QAAAA,WAAW,EAAEhB,MAAM,CAACiB,UAHd;AAINC,QAAAA,mBAAmB,EAAEC,aAAa,CAACnB,MAAM,CAACoB,iBAAR,EAA2B,GAA3B,CAJ5B;AAKNC,QAAAA,mBAAmB,EAAEF,aAAa,CAACnB,MAAM,CAACsB,iBAAR,EAA2B,GAA3B,CAL5B;AAMNC,QAAAA,sBAAsB,EAAEJ,aAAa,CAACnB,MAAM,CAACwB,mBAAR,EAA6B,GAA7B,CAN/B;AAONC,QAAAA,cAAc,EAAEN,aAAa,CAACnB,MAAM,CAAC0B,aAAR,EAAuB,GAAvB,CAPvB;AAQNC,QAAAA,aAAa,EAAER,aAAa,CAACnB,MAAM,CAAC4B,YAAR,EAAsB,GAAtB,CARtB;AASNC,QAAAA,aAAa,EAAEV,aAAa,CAACnB,MAAM,CAAC8B,YAAR,EAAsB,GAAtB,CATtB;AAUNC,QAAAA,gBAAgB,EAAEZ,aAAa,CAACnB,MAAM,CAACgC,cAAR,EAAwB,GAAxB,CAVzB;AAWNC,QAAAA,YAAY,EAAEjC,MAAM,CAACkC,WAXf;AAYNC,QAAAA,kBAAkB,EAAEnC,MAAM,CAACoC;AAZrB,OAAP;;AAeA,eAASjB,aAAT,CAAuBkB,KAAvB,EAA8BC,SAA9B,EAAyC;AACxC,YAAID,KAAK,CAACE,MAAV,EAAkB,OAAOF,KAAK,CAACG,IAAN,CAAWF,SAAX,CAAP;AAClB;AACD;;AAED,aAAS3B,4BAAT,CAAsCC,OAAtC,EAA+C;AAC9C,UAAIA,OAAO,CAAC6B,WAAR,KAAwB,IAA5B,EAAkC,OAAO,EAAP;AAElC,aAAO7B,OAAO,CAAC6B,WAAR,CAAoBC,GAApB,CAAwBC,UAAU,IAAI,IAAIjD,UAAJ,CAAeiD,UAAf,CAAtC,CAAP;AACA;AACD;;AAhDW;;AAmDbC,MAAM,CAACC,OAAP,GAAiBjD,MAAjB","sourcesContent":["const Errors = require(\"../Errors\");\nconst Request = require(\"../Request\");\nconst Suggestion = require(\"./Suggestion\");\nconst Promise = require(\"promise\");\n\n/**\n * This client sends lookups to the SmartyStreets US Autocomplete Pro API, <br>\n *     and attaches the suggestions to the appropriate Lookup objects.\n */\nclass Client {\n\tconstructor(sender) {\n\t\tthis.sender = sender;\n\t}\n\n\tsend(lookup) {\n\t\tif (typeof lookup === \"undefined\") throw new Errors.UndefinedLookupError();\n\n\t\tlet request = new Request();\n\t\trequest.parameters = buildRequestParameters(lookup);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.sender.send(request)\n\t\t\t\t.then(response => {\n\t\t\t\t\tif (response.error) reject(response.error);\n\n\t\t\t\t\tlookup.result = buildSuggestionsFromResponse(response.payload);\n\t\t\t\t\tresolve(lookup);\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t});\n\n\t\tfunction buildRequestParameters(lookup) {\n\t\t\treturn {\n\t\t\t\tsearch: lookup.search,\n\t\t\t\tselected: lookup.selected,\n\t\t\t\tmax_results: lookup.maxResults,\n\t\t\t\tinclude_only_cities: joinFieldWith(lookup.includeOnlyCities, \";\"),\n\t\t\t\tinclude_only_states: joinFieldWith(lookup.includeOnlyStates, \";\"),\n\t\t\t\tinclude_only_zip_codes: joinFieldWith(lookup.includeOnlyZIPCodes, \";\"),\n\t\t\t\texclude_states: joinFieldWith(lookup.excludeStates, \";\"),\n\t\t\t\tprefer_cities: joinFieldWith(lookup.preferCities, \";\"),\n\t\t\t\tprefer_states: joinFieldWith(lookup.preferStates, \";\"),\n\t\t\t\tprefer_zip_codes: joinFieldWith(lookup.preferZIPCodes, \";\"),\n\t\t\t\tprefer_ratio: lookup.preferRatio,\n\t\t\t\tprefer_geolocation: lookup.preferGeolocation,\n\t\t\t};\n\n\t\t\tfunction joinFieldWith(field, delimiter) {\n\t\t\t\tif (field.length) return field.join(delimiter);\n\t\t\t}\n\t\t}\n\n\t\tfunction buildSuggestionsFromResponse(payload) {\n\t\t\tif (payload.suggestions === null) return [];\n\n\t\t\treturn payload.suggestions.map(suggestion => new Suggestion(suggestion));\n\t\t}\n\t}\n}\n\nmodule.exports = Client;"]},"metadata":{},"sourceType":"script"}