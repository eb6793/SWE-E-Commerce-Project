{"ast":null,"code":"'use strict';\n\nconst HttpsClient = require('./HttpsClient');\n\nclass Jobs extends HttpsClient {\n  /**\n   * Performs the verification\n   * @returns {Promise}\n   * @param query\n   */\n  search(query) {\n    return this.request({\n      method: 'GET',\n      path: 'jobs/search'\n    }, query || {}).then(resp => Promise.resolve(resp), e => Promise.reject(e));\n  }\n  /**\n   * Creates a job from a URL\n   * @param input\n   * @param inputlocation\n   * @param filename\n   * @param runsample\n   * @param autoparse\n   * @param autostart\n   * @param historicalData\n   * @returns {Promise.<*>}\n   */\n\n\n  create(input, inputlocation, filename, runsample, autoparse, autostart, historicalData) {\n    const data = {\n      'input': input,\n      'input_location': inputlocation,\n      'filename': filename,\n      'run_sample': runsample || null,\n      'auto_start': autostart || null,\n      'auto_parse': autoparse || null\n    };\n\n    if (historicalData !== undefined) {\n      data.request_meta_data = {\n        leverage_historical_data: historicalData ? 1 : 0\n      };\n    }\n\n    return this.request({\n      method: 'POST',\n      path: 'jobs/create'\n    }, data).then(resp => Promise.resolve(resp), e => Promise.reject(e));\n  }\n  /**\n   * Starts parsing job after creation\n   * @param jobid\n   * @param autostart\n   * @returns {Promise.<*>}\n   */\n\n\n  parse(jobid, autostart) {\n    return this.request({\n      method: 'POST',\n      path: 'jobs/parse'\n    }, {\n      'job_id': jobid,\n      'auto_start': autostart || null\n    }).then(resp => Promise.resolve(resp), e => Promise.reject(e));\n  }\n  /**\n   * Starts job waiting to be started\n   * @param jobid\n   * @param runsample\n   * @returns {Promise.<*>}\n   */\n\n\n  start(jobid, runsample) {\n    return this.request({\n      method: 'POST',\n      path: 'jobs/start'\n    }, {\n      'job_id': jobid,\n      'run_sample': runsample || null\n    }).then(resp => Promise.resolve(resp), e => Promise.reject(e));\n  }\n  /**\n   * Starts job waiting to be started\n   * @param jobid\n   * @returns {Promise.<*>}\n   */\n\n\n  status(jobid) {\n    return this.request({\n      method: 'GET',\n      path: 'jobs/status'\n    }, {\n      'job_id': jobid\n    }).then(resp => Promise.resolve(resp), e => Promise.reject(e));\n  }\n  /**\n   * Retrieves job results\n   * @param jobid\n   * @param query\n   * @returns {Promise.<*>}\n   */\n\n\n  results(jobid, query) {\n    return this.request({\n      method: 'GET',\n      path: 'jobs/results'\n    }, Object.assign({\n      'job_id': jobid\n    }, query || {})).then(resp => Promise.resolve(resp), e => Promise.reject(e));\n  }\n  /**\n   * Downloads results as CSV\n   * @param jobid\n   * @param query\n   * @returns {Promise.<*>}\n   */\n\n\n  download(jobid, query) {\n    return this.request({\n      acceptedType: 'application/octet-stream',\n      method: 'GET',\n      path: 'jobs/download'\n    }, Object.assign({\n      'job_id': jobid\n    }, query || {})).then(resp => Promise.resolve(resp), e => Promise.reject(e));\n  }\n  /**\n   * Starts job waiting to be started\n   * @param jobid\n   * @returns {Promise.<*>}\n   */\n\n\n  delete(jobid) {\n    return this.request({\n      method: 'POST',\n      path: 'jobs/delete'\n    }, {\n      'job_id': jobid\n    }).then(resp => Promise.resolve(resp), e => Promise.reject(e));\n  }\n\n}\n\nJobs.remote = 'remote_url';\nJobs.supplied = 'supplied';\n/**\n * @since 4.1.4\n */\n\nJobs.helpers = {\n  inputType: {\n    remote: Jobs.remote,\n    supplied: Jobs.supplied\n  },\n  status: {\n    under_review: 'under_review',\n    queued: 'queued',\n    failed: 'failed',\n    complete: 'complete',\n    running: 'running',\n    parsing: 'parsing',\n    waiting: 'waiting',\n    waiting_analyzed: 'waiting_analyzed',\n    uploading: 'uploading'\n  }\n};\nmodule.exports = Jobs;","map":{"version":3,"sources":["/Users/fazalmahmood/SWE-E-Commerce-Project/e-commerce-store/client/node_modules/neverbounce/src/Jobs.js"],"names":["HttpsClient","require","Jobs","search","query","request","method","path","then","resp","Promise","resolve","e","reject","create","input","inputlocation","filename","runsample","autoparse","autostart","historicalData","data","undefined","request_meta_data","leverage_historical_data","parse","jobid","start","status","results","Object","assign","download","acceptedType","delete","remote","supplied","helpers","inputType","under_review","queued","failed","complete","running","parsing","waiting","waiting_analyzed","uploading","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst HttpsClient = require('./HttpsClient');\n\nclass Jobs extends HttpsClient {\n\n    /**\n     * Performs the verification\n     * @returns {Promise}\n     * @param query\n     */\n    search(query) {\n        return this.request({\n            method: 'GET',\n            path: 'jobs/search'\n        }, query || {}).then(\n            (resp) => Promise.resolve(resp),\n            (e) => Promise.reject(e)\n        )\n    }\n\n    /**\n     * Creates a job from a URL\n     * @param input\n     * @param inputlocation\n     * @param filename\n     * @param runsample\n     * @param autoparse\n     * @param autostart\n     * @param historicalData\n     * @returns {Promise.<*>}\n     */\n    create(input, inputlocation, filename, runsample, autoparse, autostart, historicalData) {\n        const data = {\n            'input': input,\n            'input_location': inputlocation,\n            'filename': filename,\n            'run_sample': runsample || null,\n            'auto_start': autostart || null,\n            'auto_parse': autoparse || null,\n        };\n\n        if(historicalData !== undefined) {\n            data.request_meta_data = { leverage_historical_data: historicalData ? 1 : 0 };\n        }\n\n        return this.request({\n            method: 'POST',\n            path: 'jobs/create'\n        }, data).then(\n            (resp) => Promise.resolve(resp),\n            (e) => Promise.reject(e)\n        )\n    }\n\n    /**\n     * Starts parsing job after creation\n     * @param jobid\n     * @param autostart\n     * @returns {Promise.<*>}\n     */\n    parse(jobid, autostart) {\n        return this.request({\n            method: 'POST',\n            path: 'jobs/parse'\n        }, {\n            'job_id': jobid,\n            'auto_start': autostart || null,\n        }).then(\n            (resp) => Promise.resolve(resp),\n            (e) => Promise.reject(e)\n        )\n    }\n\n    /**\n     * Starts job waiting to be started\n     * @param jobid\n     * @param runsample\n     * @returns {Promise.<*>}\n     */\n    start(jobid, runsample) {\n        return this.request({\n            method: 'POST',\n            path: 'jobs/start'\n        }, {\n            'job_id': jobid,\n            'run_sample': runsample || null,\n        }).then(\n            (resp) => Promise.resolve(resp),\n            (e) => Promise.reject(e)\n        )\n    }\n\n    /**\n     * Starts job waiting to be started\n     * @param jobid\n     * @returns {Promise.<*>}\n     */\n    status(jobid) {\n        return this.request({\n            method: 'GET',\n            path: 'jobs/status'\n        }, {\n            'job_id': jobid,\n        }).then(\n            (resp) => Promise.resolve(resp),\n            (e) => Promise.reject(e)\n        )\n    }\n\n    /**\n     * Retrieves job results\n     * @param jobid\n     * @param query\n     * @returns {Promise.<*>}\n     */\n    results(jobid, query) {\n        return this.request({\n            method: 'GET',\n            path: 'jobs/results'\n        },\n        Object.assign({'job_id': jobid}, query || {})\n        ).then(\n            (resp) => Promise.resolve(resp),\n            (e) => Promise.reject(e)\n        )\n    }\n\n    /**\n     * Downloads results as CSV\n     * @param jobid\n     * @param query\n     * @returns {Promise.<*>}\n     */\n    download(jobid, query) {\n        return this.request({\n            acceptedType: 'application/octet-stream',\n            method: 'GET',\n            path: 'jobs/download'\n        },\n        Object.assign({'job_id': jobid}, query || {})\n        ).then(\n            (resp) => Promise.resolve(resp),\n            (e) => Promise.reject(e)\n        )\n    }\n\n    /**\n     * Starts job waiting to be started\n     * @param jobid\n     * @returns {Promise.<*>}\n     */\n    delete(jobid) {\n        return this.request({\n            method: 'POST',\n            path: 'jobs/delete'\n        }, {\n            'job_id': jobid,\n        }).then(\n            (resp) => Promise.resolve(resp),\n            (e) => Promise.reject(e)\n        )\n    }\n}\n\nJobs.remote = 'remote_url';\nJobs.supplied = 'supplied';\n\n/**\n * @since 4.1.4\n */\nJobs.helpers = {\n    inputType: {\n        remote: Jobs.remote,\n        supplied: Jobs.supplied\n    },\n    status: {\n        under_review: 'under_review',\n        queued: 'queued',\n        failed: 'failed',\n        complete: 'complete',\n        running: 'running',\n        parsing: 'parsing',\n        waiting: 'waiting',\n        waiting_analyzed: 'waiting_analyzed',\n        uploading: 'uploading'\n    }\n};\n\nmodule.exports = Jobs;\n"]},"metadata":{},"sourceType":"script"}