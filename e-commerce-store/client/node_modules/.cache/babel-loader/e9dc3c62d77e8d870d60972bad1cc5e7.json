{"ast":null,"code":"const Errors = require(\"../Errors\");\n\nconst Request = require(\"../Request\");\n\nconst Suggestion = require(\"./Suggestion\");\n\nconst Promise = require(\"promise\");\n/**\n * This client sends lookups to the SmartyStreets US Autocomplete API, <br>\n *     and attaches the results to the appropriate Lookup objects.\n */\n\n\nclass Client {\n  constructor(sender) {\n    this.sender = sender;\n  }\n\n  send(lookup) {\n    if (typeof lookup === \"undefined\") throw new Errors.UndefinedLookupError();\n    let request = new Request();\n    request.parameters = buildRequestParameters(lookup);\n    return new Promise((resolve, reject) => {\n      this.sender.send(request).then(response => {\n        if (response.error) reject(response.error);\n        lookup.result = buildSuggestionsFromResponse(response.payload);\n        resolve(lookup);\n      }).catch(reject);\n    });\n\n    function buildRequestParameters(lookup) {\n      return {\n        prefix: lookup.prefix,\n        suggestions: lookup.maxSuggestions,\n        city_filter: joinFieldWith(lookup.cityFilter, \",\"),\n        state_filter: joinFieldWith(lookup.stateFilter, \",\"),\n        prefer: joinFieldWith(lookup.prefer, \";\"),\n        prefer_ratio: lookup.preferRatio,\n        geolocate: lookup.geolocate,\n        geolocate_precision: lookup.geolocatePrecision\n      };\n\n      function joinFieldWith(field, delimiter) {\n        if (field.length) return field.join(delimiter);\n      }\n    }\n\n    function buildSuggestionsFromResponse(payload) {\n      if (payload.suggestions === null) return [];\n      return payload.suggestions.map(suggestion => new Suggestion(suggestion));\n    }\n  }\n\n}\n\nmodule.exports = Client;","map":{"version":3,"sources":["/Users/fazalmahmood/SWE-E-Commerce-Project/e-commerce-store/client/node_modules/smartystreets-javascript-sdk/src/us_autocomplete/Client.js"],"names":["Errors","require","Request","Suggestion","Promise","Client","constructor","sender","send","lookup","UndefinedLookupError","request","parameters","buildRequestParameters","resolve","reject","then","response","error","result","buildSuggestionsFromResponse","payload","catch","prefix","suggestions","maxSuggestions","city_filter","joinFieldWith","cityFilter","state_filter","stateFilter","prefer","prefer_ratio","preferRatio","geolocate","geolocate_precision","geolocatePrecision","field","delimiter","length","join","map","suggestion","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,SAAD,CAAvB;AAEA;;;;;;AAIA,MAAMI,MAAN,CAAa;AACZC,EAAAA,WAAW,CAACC,MAAD,EAAS;AACnB,SAAKA,MAAL,GAAcA,MAAd;AACA;;AAEDC,EAAAA,IAAI,CAACC,MAAD,EAAS;AACZ,QAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC,MAAM,IAAIT,MAAM,CAACU,oBAAX,EAAN;AAEnC,QAAIC,OAAO,GAAG,IAAIT,OAAJ,EAAd;AACAS,IAAAA,OAAO,CAACC,UAAR,GAAqBC,sBAAsB,CAACJ,MAAD,CAA3C;AAEA,WAAO,IAAIL,OAAJ,CAAY,CAACU,OAAD,EAAUC,MAAV,KAAqB;AACvC,WAAKR,MAAL,CAAYC,IAAZ,CAAiBG,OAAjB,EACEK,IADF,CACOC,QAAQ,IAAI;AACjB,YAAIA,QAAQ,CAACC,KAAb,EAAoBH,MAAM,CAACE,QAAQ,CAACC,KAAV,CAAN;AAEpBT,QAAAA,MAAM,CAACU,MAAP,GAAgBC,4BAA4B,CAACH,QAAQ,CAACI,OAAV,CAA5C;AACAP,QAAAA,OAAO,CAACL,MAAD,CAAP;AACA,OANF,EAOEa,KAPF,CAOQP,MAPR;AAQA,KATM,CAAP;;AAWA,aAASF,sBAAT,CAAgCJ,MAAhC,EAAwC;AACvC,aAAO;AACNc,QAAAA,MAAM,EAAEd,MAAM,CAACc,MADT;AAENC,QAAAA,WAAW,EAAEf,MAAM,CAACgB,cAFd;AAGNC,QAAAA,WAAW,EAAEC,aAAa,CAAClB,MAAM,CAACmB,UAAR,EAAoB,GAApB,CAHpB;AAINC,QAAAA,YAAY,EAAEF,aAAa,CAAClB,MAAM,CAACqB,WAAR,EAAqB,GAArB,CAJrB;AAKNC,QAAAA,MAAM,EAAEJ,aAAa,CAAClB,MAAM,CAACsB,MAAR,EAAgB,GAAhB,CALf;AAMNC,QAAAA,YAAY,EAAEvB,MAAM,CAACwB,WANf;AAONC,QAAAA,SAAS,EAAEzB,MAAM,CAACyB,SAPZ;AAQNC,QAAAA,mBAAmB,EAAE1B,MAAM,CAAC2B;AARtB,OAAP;;AAWA,eAAST,aAAT,CAAuBU,KAAvB,EAA8BC,SAA9B,EAAyC;AACxC,YAAID,KAAK,CAACE,MAAV,EAAkB,OAAOF,KAAK,CAACG,IAAN,CAAWF,SAAX,CAAP;AAClB;AACD;;AAED,aAASlB,4BAAT,CAAsCC,OAAtC,EAA+C;AAC9C,UAAIA,OAAO,CAACG,WAAR,KAAwB,IAA5B,EAAkC,OAAO,EAAP;AAElC,aAAOH,OAAO,CAACG,WAAR,CAAoBiB,GAApB,CAAwBC,UAAU,IAAI,IAAIvC,UAAJ,CAAeuC,UAAf,CAAtC,CAAP;AACA;AACD;;AA5CW;;AA+CbC,MAAM,CAACC,OAAP,GAAiBvC,MAAjB","sourcesContent":["const Errors = require(\"../Errors\");\nconst Request = require(\"../Request\");\nconst Suggestion = require(\"./Suggestion\");\nconst Promise = require(\"promise\");\n\n/**\n * This client sends lookups to the SmartyStreets US Autocomplete API, <br>\n *     and attaches the results to the appropriate Lookup objects.\n */\nclass Client {\n\tconstructor(sender) {\n\t\tthis.sender = sender;\n\t}\n\n\tsend(lookup) {\n\t\tif (typeof lookup === \"undefined\") throw new Errors.UndefinedLookupError();\n\n\t\tlet request = new Request();\n\t\trequest.parameters = buildRequestParameters(lookup);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.sender.send(request)\n\t\t\t\t.then(response => {\n\t\t\t\t\tif (response.error) reject(response.error);\n\n\t\t\t\t\tlookup.result = buildSuggestionsFromResponse(response.payload);\n\t\t\t\t\tresolve(lookup);\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t});\n\n\t\tfunction buildRequestParameters(lookup) {\n\t\t\treturn {\n\t\t\t\tprefix: lookup.prefix,\n\t\t\t\tsuggestions: lookup.maxSuggestions,\n\t\t\t\tcity_filter: joinFieldWith(lookup.cityFilter, \",\"),\n\t\t\t\tstate_filter: joinFieldWith(lookup.stateFilter, \",\"),\n\t\t\t\tprefer: joinFieldWith(lookup.prefer, \";\"),\n\t\t\t\tprefer_ratio: lookup.preferRatio,\n\t\t\t\tgeolocate: lookup.geolocate,\n\t\t\t\tgeolocate_precision: lookup.geolocatePrecision,\n\t\t\t};\n\n\t\t\tfunction joinFieldWith(field, delimiter) {\n\t\t\t\tif (field.length) return field.join(delimiter);\n\t\t\t}\n\t\t}\n\n\t\tfunction buildSuggestionsFromResponse(payload) {\n\t\t\tif (payload.suggestions === null) return [];\n\n\t\t\treturn payload.suggestions.map(suggestion => new Suggestion(suggestion));\n\t\t}\n\t}\n}\n\nmodule.exports = Client;"]},"metadata":{},"sourceType":"script"}