{"ast":null,"code":"const UnprocessableEntityError = require(\"../Errors\").UnprocessableEntityError;\n\nconst messages = {\n  countryRequired: \"Country field is required.\",\n  freeformOrAddress1Required: \"Either freeform or address1 is required.\",\n  insufficientInformation: \"Insufficient information: One or more required fields were not set on the lookup.\",\n  badGeocode: \"Invalid input: geocode can only be set to 'true' (default is 'false'.\",\n  invalidLanguage: \"Invalid input: language can only be set to 'latin' or 'native'. When not set, the the output language will match the language of the input values.\"\n};\n/**\n * In addition to holding all of the input data for this lookup, this class also<br>\n *     will contain the result of the lookup after it comes back from the API.\n *     <p><b>Note: </b><i>Lookups must have certain required fields set with non-blank values. <br>\n *         These can be found at the URL below.</i></p>\n *     @see \"https://smartystreets.com/docs/cloud/international-street-api#http-input-fields\"\n */\n\nclass Lookup {\n  constructor(country, freeform) {\n    this.result = [];\n    this.country = country;\n    this.freeform = freeform;\n    this.address1 = undefined;\n    this.address2 = undefined;\n    this.address3 = undefined;\n    this.address4 = undefined;\n    this.organization = undefined;\n    this.locality = undefined;\n    this.administrativeArea = undefined;\n    this.postalCode = undefined;\n    this.geocode = undefined;\n    this.language = undefined;\n    this.inputId = undefined;\n    this.ensureEnoughInfo = this.ensureEnoughInfo.bind(this);\n    this.ensureValidData = this.ensureValidData.bind(this);\n  }\n\n  ensureEnoughInfo() {\n    if (fieldIsMissing(this.country)) throw new UnprocessableEntityError(messages.countryRequired);\n    if (fieldIsSet(this.freeform)) return true;\n    if (fieldIsMissing(this.address1)) throw new UnprocessableEntityError(messages.freeformOrAddress1Required);\n    if (fieldIsSet(this.postalCode)) return true;\n    if (fieldIsMissing(this.locality) || fieldIsMissing(this.administrativeArea)) throw new UnprocessableEntityError(messages.insufficientInformation);\n    return true;\n  }\n\n  ensureValidData() {\n    let languageIsSetIncorrectly = () => {\n      let isLanguage = language => this.language.toLowerCase() === language;\n\n      return fieldIsSet(this.language) && !(isLanguage(\"latin\") || isLanguage(\"native\"));\n    };\n\n    let geocodeIsSetIncorrectly = () => {\n      return fieldIsSet(this.geocode) && this.geocode.toLowerCase() !== \"true\";\n    };\n\n    if (geocodeIsSetIncorrectly()) throw new UnprocessableEntityError(messages.badGeocode);\n    if (languageIsSetIncorrectly()) throw new UnprocessableEntityError(messages.invalidLanguage);\n    return true;\n  }\n\n}\n\nfunction fieldIsMissing(field) {\n  if (!field) return true;\n  const whitespaceCharacters = /\\s/g;\n  return field.replace(whitespaceCharacters, \"\").length < 1;\n}\n\nfunction fieldIsSet(field) {\n  return !fieldIsMissing(field);\n}\n\nmodule.exports = Lookup;","map":{"version":3,"sources":["/Users/fazalmahmood/SWE-E-Commerce-Project/e-commerce-store/client/node_modules/smartystreets-javascript-sdk/src/international_street/Lookup.js"],"names":["UnprocessableEntityError","require","messages","countryRequired","freeformOrAddress1Required","insufficientInformation","badGeocode","invalidLanguage","Lookup","constructor","country","freeform","result","address1","undefined","address2","address3","address4","organization","locality","administrativeArea","postalCode","geocode","language","inputId","ensureEnoughInfo","bind","ensureValidData","fieldIsMissing","fieldIsSet","languageIsSetIncorrectly","isLanguage","toLowerCase","geocodeIsSetIncorrectly","field","whitespaceCharacters","replace","length","module","exports"],"mappings":"AAAA,MAAMA,wBAAwB,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,wBAAtD;;AACA,MAAME,QAAQ,GAAG;AAChBC,EAAAA,eAAe,EAAE,4BADD;AAEhBC,EAAAA,0BAA0B,EAAE,0CAFZ;AAGhBC,EAAAA,uBAAuB,EAAE,mFAHT;AAIhBC,EAAAA,UAAU,EAAE,uEAJI;AAKhBC,EAAAA,eAAe,EAAE;AALD,CAAjB;AASA;;;;;;;;AAOA,MAAMC,MAAN,CAAa;AACZC,EAAAA,WAAW,CAACC,OAAD,EAAUC,QAAV,EAAoB;AAC9B,SAAKC,MAAL,GAAc,EAAd;AAEA,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKE,QAAL,GAAgBC,SAAhB;AACA,SAAKC,QAAL,GAAgBD,SAAhB;AACA,SAAKE,QAAL,GAAgBF,SAAhB;AACA,SAAKG,QAAL,GAAgBH,SAAhB;AACA,SAAKI,YAAL,GAAoBJ,SAApB;AACA,SAAKK,QAAL,GAAgBL,SAAhB;AACA,SAAKM,kBAAL,GAA0BN,SAA1B;AACA,SAAKO,UAAL,GAAkBP,SAAlB;AACA,SAAKQ,OAAL,GAAeR,SAAf;AACA,SAAKS,QAAL,GAAgBT,SAAhB;AACA,SAAKU,OAAL,GAAeV,SAAf;AAEA,SAAKW,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBD,IAArB,CAA0B,IAA1B,CAAvB;AACA;;AAEDD,EAAAA,gBAAgB,GAAG;AAClB,QAAIG,cAAc,CAAC,KAAKlB,OAAN,CAAlB,EAAkC,MAAM,IAAIV,wBAAJ,CAA6BE,QAAQ,CAACC,eAAtC,CAAN;AAElC,QAAI0B,UAAU,CAAC,KAAKlB,QAAN,CAAd,EAA+B,OAAO,IAAP;AAE/B,QAAIiB,cAAc,CAAC,KAAKf,QAAN,CAAlB,EAAmC,MAAM,IAAIb,wBAAJ,CAA6BE,QAAQ,CAACE,0BAAtC,CAAN;AAEnC,QAAIyB,UAAU,CAAC,KAAKR,UAAN,CAAd,EAAiC,OAAO,IAAP;AAEjC,QAAIO,cAAc,CAAC,KAAKT,QAAN,CAAd,IAAiCS,cAAc,CAAC,KAAKR,kBAAN,CAAnD,EAA8E,MAAM,IAAIpB,wBAAJ,CAA6BE,QAAQ,CAACG,uBAAtC,CAAN;AAE9E,WAAO,IAAP;AACA;;AAEDsB,EAAAA,eAAe,GAAG;AACjB,QAAIG,wBAAwB,GAAG,MAAM;AACpC,UAAIC,UAAU,GAAGR,QAAQ,IAAI,KAAKA,QAAL,CAAcS,WAAd,OAAgCT,QAA7D;;AAEA,aAAOM,UAAU,CAAC,KAAKN,QAAN,CAAV,IAA6B,EAAEQ,UAAU,CAAC,OAAD,CAAV,IAAuBA,UAAU,CAAC,QAAD,CAAnC,CAApC;AACA,KAJD;;AAMA,QAAIE,uBAAuB,GAAG,MAAM;AACnC,aAAOJ,UAAU,CAAC,KAAKP,OAAN,CAAV,IAA4B,KAAKA,OAAL,CAAaU,WAAb,OAA+B,MAAlE;AACA,KAFD;;AAIA,QAAIC,uBAAuB,EAA3B,EAA+B,MAAM,IAAIjC,wBAAJ,CAA6BE,QAAQ,CAACI,UAAtC,CAAN;AAE/B,QAAIwB,wBAAwB,EAA5B,EAAgC,MAAM,IAAI9B,wBAAJ,CAA6BE,QAAQ,CAACK,eAAtC,CAAN;AAEhC,WAAO,IAAP;AACA;;AApDW;;AAuDb,SAASqB,cAAT,CAAyBM,KAAzB,EAAgC;AAC/B,MAAI,CAACA,KAAL,EAAY,OAAO,IAAP;AAEZ,QAAMC,oBAAoB,GAAG,KAA7B;AAEA,SAAOD,KAAK,CAACE,OAAN,CAAcD,oBAAd,EAAoC,EAApC,EAAwCE,MAAxC,GAAiD,CAAxD;AACA;;AAED,SAASR,UAAT,CAAqBK,KAArB,EAA4B;AAC3B,SAAO,CAACN,cAAc,CAACM,KAAD,CAAtB;AACA;;AAEDI,MAAM,CAACC,OAAP,GAAiB/B,MAAjB","sourcesContent":["const UnprocessableEntityError = require(\"../Errors\").UnprocessableEntityError;\nconst messages = {\n\tcountryRequired: \"Country field is required.\",\n\tfreeformOrAddress1Required: \"Either freeform or address1 is required.\",\n\tinsufficientInformation: \"Insufficient information: One or more required fields were not set on the lookup.\",\n\tbadGeocode: \"Invalid input: geocode can only be set to 'true' (default is 'false'.\",\n\tinvalidLanguage: \"Invalid input: language can only be set to 'latin' or 'native'. When not set, the the output language will match the language of the input values.\"\n};\n\n\n/**\n * In addition to holding all of the input data for this lookup, this class also<br>\n *     will contain the result of the lookup after it comes back from the API.\n *     <p><b>Note: </b><i>Lookups must have certain required fields set with non-blank values. <br>\n *         These can be found at the URL below.</i></p>\n *     @see \"https://smartystreets.com/docs/cloud/international-street-api#http-input-fields\"\n */\nclass Lookup {\n\tconstructor(country, freeform) {\n\t\tthis.result = [];\n\n\t\tthis.country = country;\n\t\tthis.freeform = freeform;\n\t\tthis.address1 = undefined;\n\t\tthis.address2 = undefined;\n\t\tthis.address3 = undefined;\n\t\tthis.address4 = undefined;\n\t\tthis.organization = undefined;\n\t\tthis.locality = undefined;\n\t\tthis.administrativeArea = undefined;\n\t\tthis.postalCode = undefined;\n\t\tthis.geocode = undefined;\n\t\tthis.language = undefined;\n\t\tthis.inputId = undefined;\n\n\t\tthis.ensureEnoughInfo = this.ensureEnoughInfo.bind(this);\n\t\tthis.ensureValidData = this.ensureValidData.bind(this);\n\t}\n\n\tensureEnoughInfo() {\n\t\tif (fieldIsMissing(this.country)) throw new UnprocessableEntityError(messages.countryRequired);\n\n\t\tif (fieldIsSet(this.freeform)) return true;\n\n\t\tif (fieldIsMissing(this.address1)) throw new UnprocessableEntityError(messages.freeformOrAddress1Required);\n\n\t\tif (fieldIsSet(this.postalCode)) return true;\n\n\t\tif (fieldIsMissing(this.locality) || fieldIsMissing(this.administrativeArea)) throw new UnprocessableEntityError(messages.insufficientInformation);\n\n\t\treturn true;\n\t}\n\n\tensureValidData() {\n\t\tlet languageIsSetIncorrectly = () => {\n\t\t\tlet isLanguage = language => this.language.toLowerCase() === language;\n\n\t\t\treturn fieldIsSet(this.language) && !(isLanguage(\"latin\") || isLanguage(\"native\"));\n\t\t};\n\n\t\tlet geocodeIsSetIncorrectly = () => {\n\t\t\treturn fieldIsSet(this.geocode) && this.geocode.toLowerCase() !== \"true\";\n\t\t};\n\n\t\tif (geocodeIsSetIncorrectly()) throw new UnprocessableEntityError(messages.badGeocode);\n\n\t\tif (languageIsSetIncorrectly()) throw new UnprocessableEntityError(messages.invalidLanguage);\n\n\t\treturn true;\n\t}\n}\n\nfunction fieldIsMissing (field) {\n\tif (!field) return true;\n\n\tconst whitespaceCharacters = /\\s/g;\n\n\treturn field.replace(whitespaceCharacters, \"\").length < 1;\n}\n\nfunction fieldIsSet (field) {\n\treturn !fieldIsMissing(field);\n}\n\nmodule.exports = Lookup;"]},"metadata":{},"sourceType":"script"}